//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

class Client {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:8000";
    }
    /**
     * @return OK
     */
    updateProduct(body, cancelToken) {
        let url_ = this.baseUrl + "/api/product/update";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processUpdateProduct(_response);
        });
    }
    processUpdateProduct(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    createCategory(body, cancelToken) {
        let url_ = this.baseUrl + "/api/category/update";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processCreateCategory(_response);
        });
    }
    processCreateCategory(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : null;
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    updateCartItemQuantity(body, cancelToken) {
        let url_ = this.baseUrl + "/api/cart/update-item-quantity";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processUpdateCartItemQuantity(_response);
        });
    }
    processUpdateCartItemQuantity(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    ipn(param, cancelToken) {
        let url_ = this.baseUrl + "/momo/ipn?";
        if (param === undefined || param === null)
            throw new Error("The parameter 'param' must be defined and cannot be null.");
        else
            url_ += "param=" + encodeURIComponent("" + param) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processIpn(_response);
        });
    }
    processIpn(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    updateMyPassword(body, cancelToken) {
        let url_ = this.baseUrl + "/api/user/update-password";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processUpdateMyPassword(_response);
        });
    }
    processUpdateMyPassword(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @param body (optional)
     * @return OK
     */
    updateMyAvatar(body, cancelToken) {
        let url_ = this.baseUrl + "/api/user/update-avatar";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processUpdateMyAvatar(_response);
        });
    }
    processUpdateMyAvatar(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : null;
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    getMyProfile(cancelToken) {
        let url_ = this.baseUrl + "/api/user/my-profile";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetMyProfile(_response);
        });
    }
    processGetMyProfile(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = UserDto.fromJS(resultData200);
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    updateMyProfile(body, cancelToken) {
        let url_ = this.baseUrl + "/api/user/my-profile";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processUpdateMyProfile(_response);
        });
    }
    processUpdateMyProfile(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    createProduct(body, cancelToken) {
        let url_ = this.baseUrl + "/api/product/create";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processCreateProduct(_response);
        });
    }
    processCreateProduct(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : null;
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    createProductOption(body, cancelToken) {
        let url_ = this.baseUrl + "/api/product-option/create";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processCreateProductOption(_response);
        });
    }
    processCreateProductOption(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : null;
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    createProductImage(body, cancelToken) {
        let url_ = this.baseUrl + "/api/product-image/create";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processCreateProductImage(_response);
        });
    }
    processCreateProductImage(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    createPayment(body, cancelToken) {
        let url_ = this.baseUrl + "/api/payment/create";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processCreatePayment(_response);
        });
    }
    processCreatePayment(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = CreatePaymentResponse.fromJS(resultData200);
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    createOrder(body, cancelToken) {
        let url_ = this.baseUrl + "/api/order/create";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processCreateOrder(_response);
        });
    }
    processCreateOrder(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : null;
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    uploadFiles(files, cancelToken) {
        let url_ = this.baseUrl + "/api/file/uploads?";
        if (files === undefined || files === null)
            throw new Error("The parameter 'files' must be defined and cannot be null.");
        else
            files && files.forEach(item => { url_ += "files=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processUploadFiles(_response);
        });
    }
    processUploadFiles(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            else {
                result200 = null;
            }
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @param body (optional)
     * @return OK
     */
    uploadFile(body, cancelToken) {
        let url_ = this.baseUrl + "/api/file/upload";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processUploadFile(_response);
        });
    }
    processUploadFile(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : null;
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    getDeliveryOption(body, cancelToken) {
        let url_ = this.baseUrl + "/api/delivery/option";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetDeliveryOption(_response);
        });
    }
    processGetDeliveryOption(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetValidShipServiceResponse.fromJS(item));
            }
            else {
                result200 = null;
            }
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    getDeliveryFee(body, cancelToken) {
        let url_ = this.baseUrl + "/api/delivery/fee";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetDeliveryFee(_response);
        });
    }
    processGetDeliveryFee(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : null;
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    createColor(body, cancelToken) {
        let url_ = this.baseUrl + "/api/color/create";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processCreateColor(_response);
        });
    }
    processCreateColor(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : null;
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    addToCart(body, cancelToken) {
        let url_ = this.baseUrl + "/api/cart/add-to-cart";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processAddToCart(_response);
        });
    }
    processAddToCart(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    callback(param, cancelToken) {
        let url_ = this.baseUrl + "/momo/callback?";
        if (param === undefined || param === null)
            throw new Error("The parameter 'param' must be defined and cannot be null.");
        else
            url_ += "param=" + encodeURIComponent("" + param) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processCallback(_response);
        });
    }
    processCallback(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : null;
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    getProductById(productId, cancelToken) {
        let url_ = this.baseUrl + "/api/product/{productId}";
        if (productId === undefined || productId === null)
            throw new Error("The parameter 'productId' must be defined.");
        url_ = url_.replace("{productId}", encodeURIComponent("" + productId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetProductById(_response);
        });
    }
    processGetProductById(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = ProductDetailDto.fromJS(resultData200);
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @param categoryId (optional)
     * @param forGender (optional)
     * @param minPrice (optional)
     * @param maxPrice (optional)
     * @param includeDeleted (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @param sortField (optional)
     * @param sortDir (optional)
     * @param keyword (optional)
     * @return OK
     */
    getProducts(categoryId, forGender, minPrice, maxPrice, includeDeleted, page, pageSize, sortField, sortDir, keyword, cancelToken) {
        let url_ = this.baseUrl + "/api/product/?";
        if (categoryId === null)
            throw new Error("The parameter 'categoryId' cannot be null.");
        else if (categoryId !== undefined)
            url_ += "categoryId=" + encodeURIComponent("" + categoryId) + "&";
        if (forGender === null)
            throw new Error("The parameter 'forGender' cannot be null.");
        else if (forGender !== undefined)
            url_ += "forGender=" + encodeURIComponent("" + forGender) + "&";
        if (minPrice === null)
            throw new Error("The parameter 'minPrice' cannot be null.");
        else if (minPrice !== undefined)
            url_ += "minPrice=" + encodeURIComponent("" + minPrice) + "&";
        if (maxPrice === null)
            throw new Error("The parameter 'maxPrice' cannot be null.");
        else if (maxPrice !== undefined)
            url_ += "maxPrice=" + encodeURIComponent("" + maxPrice) + "&";
        if (includeDeleted === null)
            throw new Error("The parameter 'includeDeleted' cannot be null.");
        else if (includeDeleted !== undefined)
            url_ += "includeDeleted=" + encodeURIComponent("" + includeDeleted) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "sortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortDir === null)
            throw new Error("The parameter 'sortDir' cannot be null.");
        else if (sortDir !== undefined)
            url_ += "sortDir=" + encodeURIComponent("" + sortDir) + "&";
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "keyword=" + encodeURIComponent("" + keyword) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetProducts(_response);
        });
    }
    processGetProducts(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = PaginatedProductBriefDto.fromJS(resultData200);
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @param eyword (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @param sortField (optional)
     * @param sortDir (optional)
     * @param keyword (optional)
     * @return OK
     */
    getCategories(eyword, page, pageSize, sortField, sortDir, keyword, cancelToken) {
        let url_ = this.baseUrl + "/api/category?";
        if (eyword === null)
            throw new Error("The parameter 'eyword' cannot be null.");
        else if (eyword !== undefined)
            url_ += "eyword=" + encodeURIComponent("" + eyword) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortField === null)
            throw new Error("The parameter 'sortField' cannot be null.");
        else if (sortField !== undefined)
            url_ += "sortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortDir === null)
            throw new Error("The parameter 'sortDir' cannot be null.");
        else if (sortDir !== undefined)
            url_ += "sortDir=" + encodeURIComponent("" + sortDir) + "&";
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "keyword=" + encodeURIComponent("" + keyword) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetCategories(_response);
        });
    }
    processGetCategories(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = PaginatedCategoryBriefDto.fromJS(resultData200);
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    getAllCategoriesGroupByParent(cancelToken) {
        let url_ = this.baseUrl + "/api/category/getAllCategoriesGroupByParent";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            responseType: "blob",
            method: "GET",
            url: url_,
            headers: {
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetAllCategoriesGroupByParent(_response);
        });
    }
    processGetAllCategoriesGroupByParent(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            }
            else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    getMyCart(cancelToken) {
        let url_ = this.baseUrl + "/api/cart/my-cart";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetMyCart(_response);
        });
    }
    processGetMyCart(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(CartItemDto.fromJS(item));
            }
            else {
                result200 = null;
            }
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    deleteProductOption(id, cancelToken) {
        let url_ = this.baseUrl + "/api/product-option/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processDeleteProductOption(_response);
        });
    }
    processDeleteProductOption(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    deleteProductImage(body, cancelToken) {
        let url_ = this.baseUrl + "/api/product-image/delete";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processDeleteProductImage(_response);
        });
    }
    processDeleteProductImage(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    deleteCategory(id, cancelToken) {
        let url_ = this.baseUrl + "/api/category/delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processDeleteCategory(_response);
        });
    }
    processDeleteCategory(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * @return OK
     */
    clearCart(productOptionId, cancelToken) {
        let url_ = this.baseUrl + "/api/cart/{productOptionId}";
        if (productOptionId === undefined || productOptionId === null)
            throw new Error("The parameter 'productOptionId' must be defined.");
        url_ = url_.replace("{productOptionId}", encodeURIComponent("" + productOptionId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processClearCart(_response);
        });
    }
    processClearCart(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
class CreateCategoryClient {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:8000";
    }
    /**
     * @return OK
     */
    1(body, cancelToken) {
        let url_ = this.baseUrl + "/api/category/create";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "*/*"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.process1(_response);
        });
    }
    process1(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : null;
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
class ClearCartClient {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:8000";
    }
    /**
     * @return OK
     */
    1(cancelToken) {
        let url_ = this.baseUrl + "/api/cart/clear-cart";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.process1(_response);
        });
    }
    process1(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
class UpdateProductCommand {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.productId = _data["productId"];
            this.name = _data["name"];
            this.forGender = _data["forGender"];
            this.description = _data["description"];
            this.price = _data["price"];
            this.discount = _data["discount"];
            this.displayImage = _data["displayImage"];
            this.brandId = _data["brandId"];
            this.categoryId = _data["categoryId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateProductCommand();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["productId"] = this.productId;
        data["name"] = this.name;
        data["forGender"] = this.forGender;
        data["description"] = this.description;
        data["price"] = this.price;
        data["discount"] = this.discount;
        data["displayImage"] = this.displayImage;
        data["brandId"] = this.brandId;
        data["categoryId"] = this.categoryId;
        return data;
    }
}
class UpdateCategoryCommand {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.slug = _data["slug"];
            this.parentId = _data["parentId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCategoryCommand();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["slug"] = this.slug;
        data["parentId"] = this.parentId;
        return data;
    }
}
class UpdateCartItemQuantityCommand {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.productOptionId = _data["productOptionId"];
            this.newQuantity = _data["newQuantity"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCartItemQuantityCommand();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["productOptionId"] = this.productOptionId;
        data["newQuantity"] = this.newQuantity;
        return data;
    }
}
class MomoCallbackParam {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.partnerCode = _data["partnerCode"];
            this.orderId = _data["orderId"];
            this.requestId = _data["requestId"];
            this.amount = _data["amount"];
            this.orderInfo = _data["orderInfo"];
            this.orderType = _data["orderType"];
            this.transId = _data["transId"];
            this.resultCode = _data["resultCode"];
            this.message = _data["message"];
            this.payType = _data["payType"];
            this.responseTime = _data["responseTime"];
            this.extraData = _data["extraData"];
            this.signature = _data["signature"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MomoCallbackParam();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["partnerCode"] = this.partnerCode;
        data["orderId"] = this.orderId;
        data["requestId"] = this.requestId;
        data["amount"] = this.amount;
        data["orderInfo"] = this.orderInfo;
        data["orderType"] = this.orderType;
        data["transId"] = this.transId;
        data["resultCode"] = this.resultCode;
        data["message"] = this.message;
        data["payType"] = this.payType;
        data["responseTime"] = this.responseTime;
        data["extraData"] = this.extraData;
        data["signature"] = this.signature;
        return data;
    }
}
class UpdatePasswordCommand {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.oldPassword = _data["oldPassword"];
            this.newPassword = _data["newPassword"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePasswordCommand();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["oldPassword"] = this.oldPassword;
        data["newPassword"] = this.newPassword;
        return data;
    }
}
class UpdateProfileCommand {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.address = _data["address"];
            this.phoneNumber = _data["phoneNumber"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateProfileCommand();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["address"] = this.address;
        data["phoneNumber"] = this.phoneNumber;
        return data;
    }
}
class CreateProductCommand {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.forGender = _data["forGender"];
            this.description = _data["description"];
            this.price = _data["price"];
            this.discount = _data["discount"];
            this.displayImage = _data["displayImage"];
            this.brandId = _data["brandId"];
            this.categoryId = _data["categoryId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CreateProductCommand();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["forGender"] = this.forGender;
        data["description"] = this.description;
        data["price"] = this.price;
        data["discount"] = this.discount;
        data["displayImage"] = this.displayImage;
        data["brandId"] = this.brandId;
        data["categoryId"] = this.categoryId;
        return data;
    }
}
class CreateProductOptionCommand {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.colorName = _data["colorName"];
            this.size = _data["size"];
            this.stock = _data["stock"];
            this.productId = _data["productId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CreateProductOptionCommand();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["colorName"] = this.colorName;
        data["size"] = this.size;
        data["stock"] = this.stock;
        data["productId"] = this.productId;
        return data;
    }
}
class CreateProductImageCommand {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.productId = _data["productId"];
            this.colorId = _data["colorId"];
            this.url = _data["url"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CreateProductImageCommand();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["productId"] = this.productId;
        data["colorId"] = this.colorId;
        data["url"] = this.url;
        return data;
    }
}
class CreatePaymentCommand {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.orderId = _data["orderId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePaymentCommand();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["orderId"] = this.orderId;
        return data;
    }
}
class CreatePaymentResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.paymentId = _data["paymentId"];
            this.paymentMethod = _data["paymentMethod"];
            this.orderId = _data["orderId"];
            this.redirectUrl = _data["redirectUrl"];
            this.mobileUrl = _data["mobileUrl"];
            this.redirect = _data["redirect"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePaymentResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["paymentId"] = this.paymentId;
        data["paymentMethod"] = this.paymentMethod;
        data["orderId"] = this.orderId;
        data["redirectUrl"] = this.redirectUrl;
        data["mobileUrl"] = this.mobileUrl;
        data["redirect"] = this.redirect;
        return data;
    }
}
class CreateOrderCommand {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.productOptionIds = [];
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["productOptionIds"])) {
                this.productOptionIds = [];
                for (let item of _data["productOptionIds"])
                    this.productOptionIds.push(item);
            }
            this.customerName = _data["customerName"];
            this.address = _data["address"];
            this.phoneNumber = _data["phoneNumber"];
            this.note = _data["note"];
            this.promotionCode = _data["promotionCode"];
            this.paymentMethod = _data["paymentMethod"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrderCommand();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.productOptionIds)) {
            data["productOptionIds"] = [];
            for (let item of this.productOptionIds)
                data["productOptionIds"].push(item);
        }
        data["customerName"] = this.customerName;
        data["address"] = this.address;
        data["phoneNumber"] = this.phoneNumber;
        data["note"] = this.note;
        data["promotionCode"] = this.promotionCode;
        data["paymentMethod"] = this.paymentMethod;
        return data;
    }
}
class GetDeliveryOptionQuery {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.toAddress = _data["toAddress"];
            this.orderValue = _data["orderValue"];
            this.cod = _data["cod"];
            this.widthInCm = _data["widthInCm"];
            this.heightInCm = _data["heightInCm"];
            this.lengthInCm = _data["lengthInCm"];
            this.weightInGram = _data["weightInGram"];
            this.toDistrict = _data["toDistrict"];
            this.toProvince = _data["toProvince"];
            this.toWard = _data["toWard"];
            this.toDetailAddress = _data["toDetailAddress"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeliveryOptionQuery();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["toAddress"] = this.toAddress;
        data["orderValue"] = this.orderValue;
        data["cod"] = this.cod;
        data["widthInCm"] = this.widthInCm;
        data["heightInCm"] = this.heightInCm;
        data["lengthInCm"] = this.lengthInCm;
        data["weightInGram"] = this.weightInGram;
        data["toDistrict"] = this.toDistrict;
        data["toProvince"] = this.toProvince;
        data["toWard"] = this.toWard;
        data["toDetailAddress"] = this.toDetailAddress;
        return data;
    }
}
class GetValidShipServiceResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.carrierName = _data["carrierName"];
            this.carrierLogo = _data["carrierLogo"];
            this.service = _data["service"];
            this.expected = _data["expected"];
            this.totalFree = _data["totalFree"];
            this.totalAmount = _data["totalAmount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GetValidShipServiceResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["carrierName"] = this.carrierName;
        data["carrierLogo"] = this.carrierLogo;
        data["service"] = this.service;
        data["expected"] = this.expected;
        data["totalFree"] = this.totalFree;
        data["totalAmount"] = this.totalAmount;
        return data;
    }
}
class GetDeliveryFeeQuery {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.toProvince = _data["toProvince"];
            this.toDistrict = _data["toDistrict"];
            this.toWard = _data["toWard"];
            this.totalPrice = _data["totalPrice"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeliveryFeeQuery();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["toProvince"] = this.toProvince;
        data["toDistrict"] = this.toDistrict;
        data["toWard"] = this.toWard;
        data["totalPrice"] = this.totalPrice;
        return data;
    }
}
class CreateColorCommand {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.image = _data["image"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CreateColorCommand();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["image"] = this.image;
        return data;
    }
}
class CreateCategoryCommand {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.parentId = _data["parentId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCategoryCommand();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        return data;
    }
}
class AddToCartCommand {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.productOptionId = _data["productOptionId"];
            this.quantity = _data["quantity"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AddToCartCommand();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["productOptionId"] = this.productOptionId;
        data["quantity"] = this.quantity;
        return data;
    }
}
class UserDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.userId = _data["userId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.address = _data["address"];
            this.avatarUrl = _data["avatarUrl"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : undefined;
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [];
                for (let item of _data["permissions"])
                    this.permissions.push(item);
            }
            this.accountEnabled = _data["accountEnabled"];
            this.emailVerified = _data["emailVerified"];
            this.customer = _data["customer"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["userId"] = this.userId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["address"] = this.address;
        data["avatarUrl"] = this.avatarUrl;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : undefined;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        data["accountEnabled"] = this.accountEnabled;
        data["emailVerified"] = this.emailVerified;
        data["customer"] = this.customer;
        return data;
    }
}
class CategoryBriefDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.createdBy = _data["createdBy"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
            this.lastModifiedDate = _data["lastModifiedDate"] ? new Date(_data["lastModifiedDate"].toString()) : undefined;
            this.categoryId = _data["categoryId"];
            this.name = _data["name"];
            this.parent = _data["parent"] ? CategoryBriefDto.fromJS(_data["parent"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryBriefDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["createdBy"] = this.createdBy;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        data["lastModifiedDate"] = this.lastModifiedDate ? this.lastModifiedDate.toISOString() : undefined;
        data["categoryId"] = this.categoryId;
        data["name"] = this.name;
        data["parent"] = this.parent ? this.parent.toJSON() : undefined;
        return data;
    }
}
class ColorDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.colorId = _data["colorId"];
            this.name = _data["name"];
            this.image = _data["image"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ColorDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["colorId"] = this.colorId;
        data["name"] = this.name;
        data["image"] = this.image;
        return data;
    }
}
class ProductDetailDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.createdBy = _data["createdBy"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
            this.lastModifiedDate = _data["lastModifiedDate"] ? new Date(_data["lastModifiedDate"].toString()) : undefined;
            this.productId = _data["productId"];
            this.name = _data["name"];
            this.forGender = _data["forGender"];
            this.slug = _data["slug"];
            this.price = _data["price"];
            this.discount = _data["discount"];
            this.displayImage = _data["displayImage"];
            this.category = _data["category"] ? CategoryBriefDto.fromJS(_data["category"]) : undefined;
            this.deletedDate = _data["deletedDate"] ? new Date(_data["deletedDate"].toString()) : undefined;
            if (Array.isArray(_data["productOptions"])) {
                this.productOptions = [];
                for (let item of _data["productOptions"])
                    this.productOptions.push(ProductOptionDto.fromJS(item));
            }
            if (Array.isArray(_data["images"])) {
                this.images = [];
                for (let item of _data["images"])
                    this.images.push(ProductImageDto.fromJS(item));
            }
            this.description = _data["description"];
            this.forGenderDisplay = _data["forGenderDisplay"];
            this.finalPrice = _data["finalPrice"];
            this.vietnamesePrice = _data["vietnamesePrice"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDetailDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["createdBy"] = this.createdBy;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        data["lastModifiedDate"] = this.lastModifiedDate ? this.lastModifiedDate.toISOString() : undefined;
        data["productId"] = this.productId;
        data["name"] = this.name;
        data["forGender"] = this.forGender;
        data["slug"] = this.slug;
        data["price"] = this.price;
        data["discount"] = this.discount;
        data["displayImage"] = this.displayImage;
        data["category"] = this.category ? this.category.toJSON() : undefined;
        data["deletedDate"] = this.deletedDate ? this.deletedDate.toISOString() : undefined;
        if (Array.isArray(this.productOptions)) {
            data["productOptions"] = [];
            for (let item of this.productOptions)
                data["productOptions"].push(item.toJSON());
        }
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        data["description"] = this.description;
        data["forGenderDisplay"] = this.forGenderDisplay;
        data["finalPrice"] = this.finalPrice;
        data["vietnamesePrice"] = this.vietnamesePrice;
        return data;
    }
}
class ProductImageDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.url = _data["url"];
            this.forColor = _data["forColor"] ? ColorDto.fromJS(_data["forColor"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProductImageDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["url"] = this.url;
        data["forColor"] = this.forColor ? this.forColor.toJSON() : undefined;
        return data;
    }
}
class ProductOptionDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.createdBy = _data["createdBy"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
            this.lastModifiedDate = _data["lastModifiedDate"] ? new Date(_data["lastModifiedDate"].toString()) : undefined;
            this.productOptionId = _data["productOptionId"];
            this.size = _data["size"];
            this.stock = _data["stock"];
            this.deletedDate = _data["deletedDate"] ? new Date(_data["deletedDate"].toString()) : undefined;
            this.color = _data["color"] ? ColorDto.fromJS(_data["color"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProductOptionDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["createdBy"] = this.createdBy;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        data["lastModifiedDate"] = this.lastModifiedDate ? this.lastModifiedDate.toISOString() : undefined;
        data["productOptionId"] = this.productOptionId;
        data["size"] = this.size;
        data["stock"] = this.stock;
        data["deletedDate"] = this.deletedDate ? this.deletedDate.toISOString() : undefined;
        data["color"] = this.color ? this.color.toJSON() : undefined;
        return data;
    }
}
class PaginatedProductBriefDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (let item of _data["data"])
                    this.data.push(ProductBriefDto.fromJS(item));
            }
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalElements = _data["totalElements"];
            this.hasNext = _data["hasNext"];
            this.hasPrevious = _data["hasPrevious"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedProductBriefDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalElements"] = this.totalElements;
        data["hasNext"] = this.hasNext;
        data["hasPrevious"] = this.hasPrevious;
        return data;
    }
}
class ProductBriefDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.createdBy = _data["createdBy"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
            this.lastModifiedDate = _data["lastModifiedDate"] ? new Date(_data["lastModifiedDate"].toString()) : undefined;
            this.productId = _data["productId"];
            this.name = _data["name"];
            this.forGender = _data["forGender"];
            this.slug = _data["slug"];
            this.price = _data["price"];
            this.discount = _data["discount"];
            this.displayImage = _data["displayImage"];
            this.category = _data["category"] ? CategoryBriefDto.fromJS(_data["category"]) : undefined;
            this.deletedDate = _data["deletedDate"] ? new Date(_data["deletedDate"].toString()) : undefined;
            this.forGenderDisplay = _data["forGenderDisplay"];
            this.finalPrice = _data["finalPrice"];
            this.vietnamesePrice = _data["vietnamesePrice"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProductBriefDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["createdBy"] = this.createdBy;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        data["lastModifiedDate"] = this.lastModifiedDate ? this.lastModifiedDate.toISOString() : undefined;
        data["productId"] = this.productId;
        data["name"] = this.name;
        data["forGender"] = this.forGender;
        data["slug"] = this.slug;
        data["price"] = this.price;
        data["discount"] = this.discount;
        data["displayImage"] = this.displayImage;
        data["category"] = this.category ? this.category.toJSON() : undefined;
        data["deletedDate"] = this.deletedDate ? this.deletedDate.toISOString() : undefined;
        data["forGenderDisplay"] = this.forGenderDisplay;
        data["finalPrice"] = this.finalPrice;
        data["vietnamesePrice"] = this.vietnamesePrice;
        return data;
    }
}
class PaginatedCategoryBriefDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (let item of _data["data"])
                    this.data.push(CategoryBriefDto.fromJS(item));
            }
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
            this.totalPages = _data["totalPages"];
            this.totalElements = _data["totalElements"];
            this.hasNext = _data["hasNext"];
            this.hasPrevious = _data["hasPrevious"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedCategoryBriefDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalElements"] = this.totalElements;
        data["hasNext"] = this.hasNext;
        data["hasPrevious"] = this.hasPrevious;
        return data;
    }
}
class CartItemDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.userId = _data["userId"];
            this.productOptionId = _data["productOptionId"];
            this.quantity = _data["quantity"];
            this.productOption = _data["productOption"] ? ProductOptionDetailDto.fromJS(_data["productOption"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CartItemDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["userId"] = this.userId;
        data["productOptionId"] = this.productOptionId;
        data["quantity"] = this.quantity;
        data["productOption"] = this.productOption ? this.productOption.toJSON() : undefined;
        return data;
    }
}
class ProductOptionDetailDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.createdBy = _data["createdBy"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
            this.lastModifiedDate = _data["lastModifiedDate"] ? new Date(_data["lastModifiedDate"].toString()) : undefined;
            this.productOptionId = _data["productOptionId"];
            this.size = _data["size"];
            this.stock = _data["stock"];
            this.deletedDate = _data["deletedDate"] ? new Date(_data["deletedDate"].toString()) : undefined;
            this.color = _data["color"] ? ColorDto.fromJS(_data["color"]) : undefined;
            this.product = _data["product"] ? ProductBriefDto.fromJS(_data["product"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProductOptionDetailDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["createdBy"] = this.createdBy;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        data["lastModifiedDate"] = this.lastModifiedDate ? this.lastModifiedDate.toISOString() : undefined;
        data["productOptionId"] = this.productOptionId;
        data["size"] = this.size;
        data["stock"] = this.stock;
        data["deletedDate"] = this.deletedDate ? this.deletedDate.toISOString() : undefined;
        data["color"] = this.color ? this.color.toJSON() : undefined;
        data["product"] = this.product ? this.product.toJSON() : undefined;
        return data;
    }
}
class DeleteProductImageCommand {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.url = _data["url"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteProductImageCommand();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["url"] = this.url;
        return data;
    }
}
class Body {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.file = _data["file"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Body();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["file"] = this.file;
        return data;
    }
}
class Body2 {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.file = _data["file"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Body2();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["file"] = this.file;
        return data;
    }
}
var ForGender;
(function (ForGender) {
    ForGender["FOR_MALE"] = "FOR_MALE";
    ForGender["FOR_FEMALE"] = "FOR_FEMALE";
    ForGender["FOR_BOTH"] = "FOR_BOTH";
})(ForGender || (ForGender = {}));
var UpdateProductCommandForGender;
(function (UpdateProductCommandForGender) {
    UpdateProductCommandForGender["FOR_MALE"] = "FOR_MALE";
    UpdateProductCommandForGender["FOR_FEMALE"] = "FOR_FEMALE";
    UpdateProductCommandForGender["FOR_BOTH"] = "FOR_BOTH";
})(UpdateProductCommandForGender || (UpdateProductCommandForGender = {}));
var CreateProductCommandForGender;
(function (CreateProductCommandForGender) {
    CreateProductCommandForGender["FOR_MALE"] = "FOR_MALE";
    CreateProductCommandForGender["FOR_FEMALE"] = "FOR_FEMALE";
    CreateProductCommandForGender["FOR_BOTH"] = "FOR_BOTH";
})(CreateProductCommandForGender || (CreateProductCommandForGender = {}));
var CreatePaymentResponsePaymentMethod;
(function (CreatePaymentResponsePaymentMethod) {
    CreatePaymentResponsePaymentMethod["COD"] = "COD";
    CreatePaymentResponsePaymentMethod["MOMO_QR"] = "MOMO_QR";
    CreatePaymentResponsePaymentMethod["MOMO_ATM"] = "MOMO_ATM";
})(CreatePaymentResponsePaymentMethod || (CreatePaymentResponsePaymentMethod = {}));
var CreateOrderCommandPaymentMethod;
(function (CreateOrderCommandPaymentMethod) {
    CreateOrderCommandPaymentMethod["COD"] = "COD";
    CreateOrderCommandPaymentMethod["MOMO_QR"] = "MOMO_QR";
    CreateOrderCommandPaymentMethod["MOMO_ATM"] = "MOMO_ATM";
})(CreateOrderCommandPaymentMethod || (CreateOrderCommandPaymentMethod = {}));
var ProductDetailDtoForGender;
(function (ProductDetailDtoForGender) {
    ProductDetailDtoForGender["FOR_MALE"] = "FOR_MALE";
    ProductDetailDtoForGender["FOR_FEMALE"] = "FOR_FEMALE";
    ProductDetailDtoForGender["FOR_BOTH"] = "FOR_BOTH";
})(ProductDetailDtoForGender || (ProductDetailDtoForGender = {}));
var ProductBriefDtoForGender;
(function (ProductBriefDtoForGender) {
    ProductBriefDtoForGender["FOR_MALE"] = "FOR_MALE";
    ProductBriefDtoForGender["FOR_FEMALE"] = "FOR_FEMALE";
    ProductBriefDtoForGender["FOR_BOTH"] = "FOR_BOTH";
})(ProductBriefDtoForGender || (ProductBriefDtoForGender = {}));
class ApiException extends Error {
    constructor(message, status, response, headers, result) {
        super();
        this.isApiException = true;
        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }
    static isApiException(obj) {
        return obj.isApiException === true;
    }
}
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
function isAxiosError(obj) {
    return obj && obj.isAxiosError === true;
}
